# 🚲 Bike Sharing Demand Prediction

This project predicts bike sharing demand using historical data. It combines a **Streamlit frontend**, a **FastAPI backend**, and multiple **machine learning models** trained and tracked via **MLflow**.

---

## 📁 Project Structure

\`\`\`
├── .github/workflows/            # CI/CD pipelines (GitHub Actions)
├── .streamlit/config.toml        # Streamlit UI configuration
├── backend/                      # FastAPI backend
│   ├── main.py                  # API entry point
│   ├── model_loader.py          # Loads trained models
│   ├── schemas.py               # Pydantic models for API
│   ├── models/                  # (optional) model helpers
├── data/bike_sharing.csv         # Dataset
├── frontend/app.py               # Streamlit app UI
├── mlruns/                      # MLflow tracking artifacts
├── models/                      # Saved ML models and metrics
│   ├── decision_tree.pkl
│   ├── linear_regression.pkl
│   ├── random_forest.pkl
│   ├── r2_scores.json
├── venv/                        # Python virtual environment
├── __pycache__/                 # Compiled Python files
\`\`\`

---

## 🚀 Features

- 🧠 Trains multiple models: Linear Regression, Decision Tree, Random Forest  
- 📈 Tracks experiments using MLflow  
- 🎯 Displays R² scores for evaluation  
- 🖥️ Streamlit interface for predictions  
- ⚙️ FastAPI backend for serving predictions  

---

## 📊 Dataset

The project uses the **bike_sharing.csv** dataset containing:

- Date & time  
- Weather conditions  
- Temperature, humidity  
- Count of bike rentals (target variable)  

---

## 🛠️ Installation

1. **Clone the repository:**

   \`\`\`bash
   git clone https://github.com/yourusername/bike-sharing-prediction.git
   cd bike-sharing-prediction
   \`\`\`

2. **Set up a virtual environment:**

   \`\`\`bash
   python -m venv venv
   # macOS/Linux
   source venv/bin/activate  
   # Windows
   venv\Scripts\activate
   \`\`\`

3. **Install dependencies:**

   \`\`\`bash
   pip install -r requirements.txt
   \`\`\`

---

## ⚙️ Running the App

1. **Start the backend:**

   \`\`\`bash
   uvicorn backend.main:app --reload
   \`\`\`

2. **Start the frontend:**

   \`\`\`bash
   streamlit run frontend/app.py
   \`\`\`

---

## 📦 Trained Models

Pre-trained models are saved as \`.pkl\` files in the \`models/\` folder. These are loaded by the backend to serve predictions.

---

## 🧪 MLflow Tracking

- MLflow logs experiments and metrics.  
- To launch the MLflow UI, run:

  \`\`\`bash
  mlflow ui
  \`\`\`

---

## 📈 Evaluation Metrics

Models are evaluated based on:

- R² Score (stored in \`models/r2_scores.json\`)  
- MAE, RMSE (optional — can be added for further improvements)  

---

## 📌 To Do

- [ ] Add Docker support  
- [ ] Add unit tests for backend  
- [ ] Improve UI with charts  
- [ ] Integrate with a database  

---

## 👨‍💻 Author

**Hassan Sarfraz**  
_Data Science | COMSATS University Islamabad_

---

## 📄 License

This project is licensed under the MIT License. See \`LICENSE\` for details.